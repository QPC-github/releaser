/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/ebay/releaser/pkg/apis/fleet/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ReleaseEventLister helps list ReleaseEvents.
// All objects returned here must be treated as read-only.
type ReleaseEventLister interface {
	// List lists all ReleaseEvents in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.ReleaseEvent, err error)
	// ReleaseEvents returns an object that can list and get ReleaseEvents.
	ReleaseEvents(namespace string) ReleaseEventNamespaceLister
	ReleaseEventListerExpansion
}

// releaseEventLister implements the ReleaseEventLister interface.
type releaseEventLister struct {
	indexer cache.Indexer
}

// NewReleaseEventLister returns a new ReleaseEventLister.
func NewReleaseEventLister(indexer cache.Indexer) ReleaseEventLister {
	return &releaseEventLister{indexer: indexer}
}

// List lists all ReleaseEvents in the indexer.
func (s *releaseEventLister) List(selector labels.Selector) (ret []*v1alpha2.ReleaseEvent, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.ReleaseEvent))
	})
	return ret, err
}

// ReleaseEvents returns an object that can list and get ReleaseEvents.
func (s *releaseEventLister) ReleaseEvents(namespace string) ReleaseEventNamespaceLister {
	return releaseEventNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReleaseEventNamespaceLister helps list and get ReleaseEvents.
// All objects returned here must be treated as read-only.
type ReleaseEventNamespaceLister interface {
	// List lists all ReleaseEvents in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.ReleaseEvent, err error)
	// Get retrieves the ReleaseEvent from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.ReleaseEvent, error)
	ReleaseEventNamespaceListerExpansion
}

// releaseEventNamespaceLister implements the ReleaseEventNamespaceLister
// interface.
type releaseEventNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ReleaseEvents in the indexer for a given namespace.
func (s releaseEventNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.ReleaseEvent, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.ReleaseEvent))
	})
	return ret, err
}

// Get retrieves the ReleaseEvent from the indexer for a given namespace and name.
func (s releaseEventNamespaceLister) Get(name string) (*v1alpha2.ReleaseEvent, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("releaseevent"), name)
	}
	return obj.(*v1alpha2.ReleaseEvent), nil
}
